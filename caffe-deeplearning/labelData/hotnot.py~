#imports for flask to run
from flask import Flask
from flask import render_template
from flask import flash, redirect
from flask import request, session, g, url_for, abort, jsonify

import os
import sqlite3


#imports for wtforms
from flask_wtf import Form
from wtforms import StringField, BooleanField
from wtforms.validators import DataRequired

#Class for a form
class LabelForm(Form):
    safe = BooleanField('safe', default=False)
    residential = BooleanField('residential', default=False)
    outside_venue = BooleanField('outside_venue', default=False)
    tourist = BooleanField('tourist', default=False)
    old = BooleanField('old', default=False)
    modern = BooleanField('modern', default=False)
    poor = BooleanField('poor', default=False)
    rich = BooleanField('rich', default=False)
    construction = BooleanField('construction', default=False)

# create our little application :)                                                               
app = Flask(__name__)
app.config.from_object('config')

# Load default config and override config from an environment variable
app.config.update(dict(
    DATABASE=os.path.join(app.root_path, 'hotnot.db'),
    SECRET_KEY='development key',
    USERNAME='admin',
    PASSWORD='default'
))
app.config.from_envvar('HOTNOT_SETTINGS', silent=True)

def connect_db():
    """Connects to the specific database."""
    rv = sqlite3.connect(app.config['DATABASE'])
    rv.row_factory = sqlite3.Row
    return rv

def get_db():
    """Opens a new database connection if there is none yet for the
    current application context.
    """
    if not hasattr(g, 'sqlite_db'):
        g.sqlite_db = connect_db()
    return g.sqlite_db

@app.teardown_appcontext
def close_db(error):
    """Closes the database again at the end of the request."""
    if hasattr(g, 'sqlite_db'):
        g.sqlite_db.close()

def init_db():
    db = get_db()
    with app.open_resource('schema.sql', mode='r') as f:
        db.cursor().executescript(f.read())
    db.commit()

@app.cli.command('initdb')
def initdb_command():
    """Initializes the database."""
    init_db()
    print 'Initialized the database.'


@app.route('/')
def show_entries():
    db = get_db()
    cur = db.execute('select image_id, safe from entries order by id desc')
    entries = cur.fetchall()
    return render_template('show_entries.html', entries=entries)

@app.route('/index')
def index():
    user = {'nickname': 'Miguel'}  # fake user
    return render_template('index.html',
                           #title='Test',
                           user=user)

@app.route('/add', methods=['POST'])
def add_entry():
    print(request.data)
    print(request.json)
    # print(request.json['image_id'])
    # print(request.json['tags'])
    return jsonify({"success":True, "code": 201}), 201
    # db = get_db()
    # db.execute('insert into entries (image_id, safe) values (?, ?)',
    #              [request.form['image_id'], request.form['safe']])
    # db.commit()
    # flash('New entry was successfully posted')
    # return redirect(url_for('show_entries'))



@app.route('/label', methods=['GET', 'POST'])
def label():
    form = LabelForm()
    return render_template('label.html', 
                           title='Create set',
                           form=form,
                           image_id=1,
                           image_src="http://link_to_image")


if __name__ == "__main__":
    app.run(host="0.0.0.0")
